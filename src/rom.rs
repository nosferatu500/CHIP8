use std::path::Path;
use std::fs::File;
use std::io::*;

pub struct Rom {
    data: [u8; 4096],
}

impl Rom {
    pub fn new<P: AsRef<Path>>(path: P) -> Result<Rom> {
        let mut file = try!(File::open(&path));

        let mut buf = Vec::new();

        try!(file.read_to_end(&mut buf));

        let mut data = [0; 4096];

        let sprites: [[u8; 5]; 16] = [
            [0xF0, 0x90, 0x90, 0x90, 0xF0],
            [0x20, 0x60, 0x20, 0x20, 0x70],
            [0xF0, 0x10, 0xF0, 0x80, 0xF0],
            [0xF0, 0x10, 0xF0, 0x10, 0xF0],
            [0x90, 0x90, 0xF0, 0x10, 0x10],
            [0xF0, 0x80, 0xF0, 0x10, 0xF0],
            [0xF0, 0x80, 0xF0, 0x90, 0xF0],
            [0xF0, 0x10, 0x20, 0x40, 0x40],
            [0xF0, 0x90, 0xF0, 0x90, 0xF0],
            [0xF0, 0x90, 0xF0, 0x10, 0xF0],
            [0xF0, 0x90, 0xF0, 0x90, 0x90],
            [0xE0, 0x90, 0xE0, 0x90, 0xE0],
            [0xF0, 0x80, 0x80, 0x80, 0xF0],
            [0xE0, 0x90, 0x90, 0x90, 0xE0],
            [0xF0, 0x80, 0xF0, 0x80, 0xF0],
            [0xF0, 0x80, 0xF0, 0x80, 0x80],
        ];

        let mut i = 0;
        for sprite in &sprites {
            for pos in sprite {
                data[i] = *pos;
                i += 1;
            }
        }

        let mut j = 0x200;

        for i in buf.iter() {
            data[j] = *i;
            j += 1;
        }

        Ok(Rom { data })
    }

    pub fn load(&self, address: u16) -> u8 {
        self.data[address as usize]
    }

    pub fn store(&mut self, address: u16, value: u8) {
        self.data[address as usize] = value;
    }
}
